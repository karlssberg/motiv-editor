//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return Success
   */
  ruleGET(ruleName: string): Promise<GetRuleResource> {
    let url_ = this.baseUrl + '/motiv/rule/{ruleName}';
    if (ruleName === undefined || ruleName === null)
      throw new Error("The parameter 'ruleName' must be defined.");
    url_ = url_.replace('{ruleName}', encodeURIComponent('' + ruleName));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRuleGET(_response);
    });
  }

  protected processRuleGET(response: Response): Promise<GetRuleResource> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetRuleResource.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<GetRuleResource>(null as any);
  }

  /**
   * @return Success
   */
  rulePUT(ruleName: string, body: PutRuleResource): Promise<void> {
    let url_ = this.baseUrl + '/motiv/rule/{ruleName}';
    if (ruleName === undefined || ruleName === null)
      throw new Error("The parameter 'ruleName' must be defined.");
    url_ = url_.replace('{ruleName}', encodeURIComponent('' + ruleName));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRulePUT(_response);
    });
  }

  protected processRulePUT(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class GetRuleResource implements IGetRuleResource {
  compatiblePropositions?: PropositionResource[] | undefined;
  source?: string | undefined;

  constructor(data?: IGetRuleResource) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['compatiblePropositions'])) {
        this.compatiblePropositions = [] as any;
        for (let item of _data['compatiblePropositions'])
          this.compatiblePropositions!.push(PropositionResource.fromJS(item));
      }
      this.source = _data['source'];
    }
  }

  static fromJS(data: any): GetRuleResource {
    data = typeof data === 'object' ? data : {};
    let result = new GetRuleResource();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.compatiblePropositions)) {
      data['compatiblePropositions'] = [];
      for (let item of this.compatiblePropositions)
        data['compatiblePropositions'].push(item.toJSON());
    }
    data['source'] = this.source;
    return data;
  }
}

export interface IGetRuleResource {
  compatiblePropositions?: PropositionResource[] | undefined;
  source?: string | undefined;
}

export enum MotivPrimitive {
  Unknown = 'unknown',
  Decimal = 'decimal',
  String = 'string',
  DateTime = 'dateTime',
  Integer = 'integer',
}

export class MotivTypeResource implements IMotivTypeResource {
  motivType?: MotivPrimitive;

  constructor(data?: IMotivTypeResource) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.motivType = _data['motivType'];
    }
  }

  static fromJS(data: any): MotivTypeResource {
    data = typeof data === 'object' ? data : {};
    let result = new MotivTypeResource();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['motivType'] = this.motivType;
    return data;
  }
}

export interface IMotivTypeResource {
  motivType?: MotivPrimitive;
}

export class PropositionResource implements IPropositionResource {
  readonly id?: string | undefined;
  parameters?: { [key: string]: MotivTypeResource } | undefined;
  template?: string | undefined;

  constructor(data?: IPropositionResource) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).id = _data['id'];
      if (_data['parameters']) {
        this.parameters = {} as any;
        for (let key in _data['parameters']) {
          if (_data['parameters'].hasOwnProperty(key))
            (<any>this.parameters)![key] = _data['parameters'][key]
              ? MotivTypeResource.fromJS(_data['parameters'][key])
              : new MotivTypeResource();
        }
      }
      this.template = _data['template'];
    }
  }

  static fromJS(data: any): PropositionResource {
    data = typeof data === 'object' ? data : {};
    let result = new PropositionResource();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    if (this.parameters) {
      data['parameters'] = {};
      for (let key in this.parameters) {
        if (this.parameters.hasOwnProperty(key))
          (<any>data['parameters'])[key] = this.parameters[key]
            ? this.parameters[key].toJSON()
            : <any>undefined;
      }
    }
    data['template'] = this.template;
    return data;
  }
}

export interface IPropositionResource {
  id?: string | undefined;
  parameters?: { [key: string]: MotivTypeResource } | undefined;
  template?: string | undefined;
}

export class PutRuleResource implements IPutRuleResource {
  source?: string | undefined;

  constructor(data?: IPutRuleResource) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.source = _data['source'];
    }
  }

  static fromJS(data: any): PutRuleResource {
    data = typeof data === 'object' ? data : {};
    let result = new PutRuleResource();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['source'] = this.source;
    return data;
  }
}

export interface IPutRuleResource {
  source?: string | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
